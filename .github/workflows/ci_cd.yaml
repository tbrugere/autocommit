name: tests
on: [push, pull_request]
jobs:
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: 'poetry'
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: install dependencies
        run: make .make/deps .make/test-deps
      - name: run tests and generate coverage report
        run: make .make/run-tests coverage.xml
        env:
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
      - name: save coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml
      - name: Build package
        run: poetry build
      - name: save package
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
  upload-coverage:
    runs-on: ubuntu-latest
    needs: test-and-build
    steps:
      - name: retrieve coverage
        uses: actions/download-artifact@v3
        with:
          name: coverage
          path: coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          verbose: true
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_latest_version: ${{ steps.new-version.outputs.is_latest_version }}
    needs: test-and-build # only create new versions if tests pass...
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
          filter: tree:0
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Check version
        id: version
        run: echo "version=$(poetry version -s)" >> $GITHUB_OUTPUT
      - name: Look for previous tag for this version
        id: new-version
        run: |
          if [ $(git tag -l "${{ steps.version.outputs.version }}") ]; then
            echo "is_latest_version=false" >> $GITHUB_OUTPUT
          else
            echo "is_latest_version=true" >> $GITHUB_OUTPUT
          fi
      - name: list tags for debug
        run: git tag -l
  publish-pipy: 
    runs-on: ubuntu-latest
    needs: 
      - test-and-build
      - check-version
    permissions:
      id-token: write
    if: ${{ needs.check-version.outputs.is_latest_version == 'true' }}
    steps:
      - name: retrieve package
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: list files
        run: find
      - name: publish package
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
  tag:
    runs-on: ubuntu-latest
    needs: 
      - check-version
      - test-and-build
    permissions:
      id-token: write
      contents: write
    if: ${{ needs.check-version.outputs.is_latest_version == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: setup git
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
      - name: Create tag
        run: git tag -a "${{ needs.check-version.outputs.version }}" -m "version ${{ needs.check-version.outputs.version }}"
      - name: Push tag
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref}}
          tags: true


